X = cbind(proteins, covars[,c("age.sample", "bmi")])
head(X)
head(covars)
Y = covars$packyears
model.lasso = cv.glmnet(x = X, y = Y, penalty.factor=c("age.sample", "bmi"))
?glmntet
?glmnet
rep(1, ncol(x))
rep(1, ncol(X))
head(X)
rep(1, ncol(X)-2)
c((rep(1, ncol(X)-2)), c(0, 0))
penalty.factor <- c((rep(1, ncol(X)-2)), c(0, 0))
model.lasso = cv.glmnet(x = X, y = Y, penalty.factor=penalty.factor)
dim(X)
length(penalty.factor)
class(penalty.factor)
class(Y)
head(Y)
penalty.factor <- double(c((rep(1, ncol(X)-2)), c(0, 0)))
penalty.factor <- as.double(c((rep(1, ncol(X)-2)), c(0, 0)))
model.lasso = cv.glmnet(x = X, y = Y, penalty.factor=penalty.factor)
###===== When using the default lambda sequence ======###
x <- matrix(rnorm(100 * 20), 100, 20)
y <- rnorm(100)
fit <- glmnet(x, y)
model.lasso = glmnet(x = X, y = Y, penalty.factor=penalty.factor)
# default value
penalty.factor <- rep(1, ncol(x))
penalty.factor
fit2 <- glmnet(x, y, penalty.factor = penalty.factor)
penalty.factor <- rbind(rep(1, ncol(X)-2), c(0, 0))
penalty.factor <- cbind(rep(1, ncol(X)-2), c(0, 0))
penalty.factor <- append(rep(1, ncol(X)-2), c(0, 0))
model.lasso = glmnet(x = X, y = Y, penalty.factor=penalty.factor)
penalty.factor
penalty.factor <- rep(1, ncol(X))
# c(0, 0)
penalty.factor
model.lasso = glmnet(x = X, y = Y, penalty.factor=penalty.factor)
X = cbind(proteins, covars[,c("age.sample", "bmi")])
Y = covars$packyears
###===== When using the default lambda sequence ======###
x <- matrix(rnorm(100 * 20), 100, 20)
y <- rnorm(100)
fit <- glmnet(x, y)
l1 <- fit$lambda
x
dim(x)
dim(y)
length(y)
# default value
penalty.factor <- rep(1, ncol(x))
penalty.factor
length(penalty.factor)
fit2 <- glmnet(x, y, penalty.factor = penalty.factor)
l2 <- fit2$lambda
# uniformly scale
penalty.factor <- rep(2, ncol(x))
fit3 <- glmnet(x, y, penalty.factor = penalty.factor)
l3 <- fit3$lambda
# not uniformly scale
penalty.factor <- c(rep(1, ncol(x)/2), rep(2, ncol(x)/2))
penalty.factor
length(penalty.factor)
penalty.factor <- c(rep(1, ncol(x) - 2), rep(0, 2)
penalty.factor <- c(rep(1, ncol(x) - 2), rep(0, 2))
penalty.factor <- c(rep(1, ncol(x) - 2), rep(0, 2))
penalty.factor
model.lasso = glmnet(x = X, y = Y, penalty.factor=penalty.factor)
x = cbind(proteins, covars[,c("age.sample", "bmi")])
y = covars$packyears
model.lasso = glmnet(x, y, penalty.factor = penalty.factor)
head(x)
x = as.matrix(cbind(proteins, covars[,c("age.sample", "bmi")]))
model.lasso = glmnet(x, y, penalty.factor = penalty.factor)
model.lasso
model.lasso = glmnet(x=x, y=y, penalty.factor = penalty.factor)
covars=readRDS("Data/Covariates_selected_proteins.rds")
proteins=readRDS("Data/Proteins_selected_denoised_re.rds")
transcripts=readRDS("Data/Transcripts_log_transformed.rds")
ids=intersect(rownames(proteins), rownames(transcripts))
covars=covars[ids,]
transcripts=transcripts[ids,]
proteins=proteins[ids,]
print(all(rownames(proteins)==rownames(transcripts)))
print(all(rownames(proteins)==rownames(covars)))
head(covars)
head(proteins)
x = as.matrix(cbind(proteins, covars[,c("age.sample", "bmi")]))
y = covars$packyears
head(X)
penalty.factor <- c(rep(1, ncol(x) - 2), rep(0, 2))
dim(x)
dim(penalty.factor)
length(penalty.factor)
model.lasso = glmnet(x=x, y=y, penalty.factor = penalty.factor)
model.lasso = cv.glmnet(x=x, y=y, penalty.factor = penalty.factor)
y = as.vector(covars$packyears)
x = as.matrix(cbind(proteins, covars[,c("age.sample", "bmi")]))
y = as.vector(covars$packyears)
head(X)
penalty.factor <- c(rep(1, ncol(x) - 2), rep(0, 2))
model.lasso = cv.glmnet(x=x, y=y, penalty.factor = penalty.factor)
length(y)
length(na.omit(y))
# Complete cases
ids_to_exclude=unique(c(which(is.na(covars$packyears)),
which(is.na(covars$age.sample)),
which(is.na(covars$bmi))))
if (length(ids_to_exclude)>0){
covars=covars[-ids_to_exclude,]
}
proteins=proteins[rownames(covars),]
y=covars$packyears
x=cbind(proteins, age=covars$age.sample, bmi=covars$bmi)
penalty.factor <- c(rep(1, ncol(x) - 2), rep(0, 2))
model.lasso = cv.glmnet(x=x, y=y, penalty.factor = penalty.factor)
lassomodels.1se
coef(model.lasso, s = "lambda.1se")
lassomodels.1se = coef(model.lasso, s = "lambda.1se")[-1]
apply(lassomodels.1se, 2, FUN = function(x) {sum(x != 0)})
lassomodels.1se
apply(lassomodels.1se, 2, FUN = function(x) {sum(x != 0)})
vapply(lassomodels.1se, 2, FUN = function(x) {sum(x != 0)})
sum(lassomodels.1se != 0)
lassomodels.1se = coef(model.lasso, s = "lambda.1se")
lassomodels.1se
lassomodels.1se != 0
lassomodels.1se[-1] != 0
lassomodels.1selassomodels.1se[-1] != 0,]
lassomodels.1se[lassomodels.1se[-1] != 0,]
lassomodels.1se
lassomodels.1se[lassomodels.1se[-1] != 0,]
lassomodels.1se[lassomodels.1se[1] != 0,]
lassomodels.1se = coef(model.lasso, s = "lambda.1se")
lassomodels.1se[lassomodels.1se[1] != 0,]
lassomodels.1se = coef(model.lasso, s = "lambda.1se")
model.lasso = cv.glmnet(x=x, y=y, penalty.factor = penalty.factor)
lassomodels.1se
lassomodels.1se[lassomodels.1se[1] != .,]
lassomodels.1se[lassomodels.1se[1] != ".",]
lassomodels.1se[lassomodels.1se[1] > 0,]
lassomodels.1se[1] > 0
d
lassomodels.1se[lassomodels.1se > 0,]
lassomodels.1se = coef(model.lasso, s = "lambda.1se")
lassomodels.1se[lassomodels.1se != 0,]
lassomodels.1se[1]
lassomodels.1se
lassomodels.1se[lassomodels.1se != 0]
rowname(lassomodels.1se[lassomodels.1se != 0])
rownames(lassomodels.1se[lassomodels.1se != 0])
lassomodels.1se
lassomodels.1se = coef(model.lasso, s = "lambda.1se")[-1]
lassomodels.1se
lassomodels.1se = coef(model.lasso,
s = "lambda.1se")[-1]
lassomodels.1se
model.lasso
lassomodels.1se = coef(model.lasso,
s = "lambda.1se")
lassomodels.1se = coef(model.lasso,
s = "lambda.1se")
lassomodels.1se
which(lassomodels.1se>0, arr.ind = TRUE)
which(lassomodels.1se!=0, arr.ind = TRUE)
which(lassomodels.1se!=0)
lassomodels.1se[which(lassomodels.1se!=0)]
lassomodels.1se = coef(model.lasso, s = "lambda.1se")
which(lassomodels.1se!=0, arr.ind = TRUE)
model.lasso = cv.glmnet(x=x, y=y, penalty.factor = penalty.factor)
lassomodels.1se = coef(model.lasso, s = "lambda.1se")
which(lassomodels.1se!=0, arr.ind = TRUE)
lassomodels.1se
rownames(which(lassomodels.1se!=0, arr.ind = TRUE))
rownames(which(lassomodels.1se!=0, arr.ind = TRUE))[-1]
rownames(which(lassomodels.1se!=0))[-1]
rownames(which(lassomodels.1se!=0, arr.ind = TRUE))[-1]
?cv.glmnet()
# run the cv glmnet
model.lasso = cv.glmnet(x=x, y=y, penalty.factor = penalty.factor, type.measure="mse")
# list the
lassomodels.1se = coef(model.lasso, s = "lambda.1se")
rownames(which(lassomodels.1se!=0, arr.ind = TRUE))[-1]
# run the cv glmnet
model.lasso = cv.glmnet(x=x, y=y, penalty.factor = penalty.factor, type.measure="mse", seed=42)
# list the
lassomodels.1se = coef(model.lasso, s = "lambda.1se")
rownames(which(lassomodels.1se!=0, arr.ind = TRUE))[-1]
# Running stability selection
t0=Sys.time()
out=CalibrateRegression(xdata=x, ydata=y, K=100, tau=0.5, verbose=FALSE,
penalty.factor=c(rep(1,ncol(proteins)),0,0), family="gaussian")
t1=Sys.time()
print(t1-t0)
# Running stability selection
t0=Sys.time()
out=CalibrateRegression(xdata=x, ydata=y, K=100, tau=0.5, verbose=FALSE,
penalty.factor=c(rep(1,ncol(proteins)),0,0), family="gaussian")
t1=Sys.time()
print(t1-t0)
CalibrationPlot(out)
# Calibrated selection proportions
selprop=CalibratedSelectionProportionsRegression(out, plot=FALSE)
# Calibrated selection proportions
selprop=CalibratedSelectionProportionsRegression(out, plot=FALSE)
selprop=selprop[-which(names(selprop)%in%c("age","bmi"))]
print(selprop)
# Calibrated parameters
hat_params=GetArgmax(out)
print(hat_params)
# Visualisation of selection proportions
par(mar=c(10,5,1,1))
plot(selprop, type="h", lwd=3, las=1, xlab="", ylab="Selection Proportion", xaxt="n",
col=ifelse(selprop>=hat_params[2], yes="red", no="grey"), cex.lab=1.5)
abline(h=hat_params[2], lty=2, col="darkred")
for (i in 1:length(selprop)){
axis(side=1, at=i, labels=names(selprop)[i], las=2,
col=ifelse(selprop[i]>=hat_params[2], yes="red", no="grey"),
col.axis=ifelse(selprop[i]>=hat_params[2], yes="red", no="grey"))
}
selprop
hat_params[2]
rownames(which(selprop>hat_params[2], arr.ind = TRUE))
selprop>hat_params[2]
which(selprop>hat_params[2], arr.ind = TRUE)
hat_params[2]
which(selprop>0.88, arr.ind = TRUE)
lasso_variables <- rownames(which(lassomodels.1se!=0, arr.ind = TRUE))[-1]
lasso_vars <- rownames(which(lassomodels.1se!=0, arr.ind = TRUE))[-1]
lasso_vars
stab_vars <- which(selprop>hat_params[2], arr.ind = TRUE)
stab_vars
lasso_vars
rownames(stab_vars)
names(stab_vars)
stab_vars <- names(which(selprop>hat_params[2], arr.ind = TRUE))
stab_vars
lasso_vars
# Visualisation of selection proportions
par(mar=c(10,5,1,1))
plot(selprop, type="h", lwd=3, las=1, xlab="", ylab="Selection Proportion", xaxt="n",
col=ifelse(selprop>=hat_params[2], yes="red", no="grey"), cex.lab=1.5)
abline(h=hat_params[2], lty=2, col="darkred")
ifelse(selprop>=hat_params[2], yes="red", no="grey")
stab_vars <- names(which(selprop>=hat_params[2], arr.ind = TRUE))
stab_vars
# run the cv glmnet
model.lasso = cv.glasso(x=x, y=y, penalty.factor = penalty.factor, type.measure="mse", seed=42)
# Running stability selection
t0=Sys.time()
out=CalibrateNetwork(data=proteins, K=100, tau=0.5, refine_calib_grid=FALSE, verbose=FALSE)
t1=Sys.time()
print(t1-t0)
CalibrationPlot(out)
# Adjacency matrix of the calibrated network
A=CalibratedAdjacency(out)
# Getting igraph object
mygraph=GetGraph(adjacency=A)
par(mar=rep(0,4))
set.seed(1)
plot(mygraph, layout=layout_with_fr(mygraph))
mynode_colour=rep("skyblue",ncol(proteins))
names(mynode_colour)=colnames(proteins)
smoking_related_proteins=names(selprop)[selprop>=hat_params[2]]
mynode_colour[smoking_related_proteins]="tomato"
mygraph=GetGraph(adjacency=A, node_color=mynode_colour)
par(mar=rep(0,4))
set.seed(1)
plot(mygraph, layout=layout_with_fr(mygraph))
# get the distances between the smoking-related proteins
print(distances(mygraph)[smoking_related_proteins,smoking_related_proteins])
# get the distances between the smoking-related proteins
smoking_related_proteins
print(distances(mygraph))
print(mean(distances(mygraph)))
print(distances(mygraph)[smoking_related_proteins,smoking_related_proteins])
# get the distances between the smoking-related proteins
print(rowmin(distances(mygraph)))
# get the distances between the smoking-related proteins
print(rowMin(distances(mygraph)))
# get the distances between the smoking-related proteins
print(Min(distances(mygraph)))
# get the distances between the smoking-related proteins
print(min(distances(mygraph)))
# Running stability selection under constraint
t0=Sys.time()
out=CalibrateNetwork(data=proteins, K=100, tau=0.5, PFER_thr=20,
refine_calib_grid=FALSE, verbose=FALSE)
t1=Sys.time()
print(t1-t0)
CalibrationPlot(out)
CalibrationPlot(out)
# Adjacency matrix of the calibrated network
A=CalibratedAdjacency(out)
# Getting igraph object
mygraph=GetGraph(adjacency=A)
par(mar=rep(0,4))
set.seed(1)
plot(mygraph, layout=layout_with_fr(mygraph))
print(sort(betweenness(mygraph), decreasing=TRUE))
# Loading the data
proteins=readRDS("Data/Proteins_selected_denoised_re.rds")
transcripts=readRDS("Data/Transcripts_log_transformed.rds")
annot=readRDS("Data/Transcripts_annotation.rds")
# Combining measurements from the same individuals
ids=intersect(rownames(proteins), rownames(transcripts))
proteins=proteins[ids,]
transcripts=transcripts[ids,]
x=cbind(proteins, transcripts)
# Loading the data
proteins=readRDS("Data/Proteins_selected_denoised_re.rds")
transcripts=readRDS("Data/Transcripts_log_transformed.rds")
annot=readRDS("Data/Transcripts_annotation.rds")
# Combining measurements from the same individuals
ids=intersect(rownames(proteins), rownames(transcripts))
proteins=proteins[ids,]
transcripts=transcripts[ids,]
x=cbind(proteins, transcripts)
# Heatmap of correlation
pheatmap(cor(x), cluster_rows=FALSE, cluster_cols=FALSE, breaks=seq(-1,1,length.out=100), border=NA)
pk=c(ncol(proteins), ncol(transcripts))
pk
# Running stability selection under constraint
t0=Sys.time()
pk=c(ncol(proteins), ncol(transcripts))
Lambda=LambdaGridNetwork(data=x, pk=pk, lambda_path_refined_cardinal=20, PFER_thr=50)
out=CalibrateNetwork(data=x, pk=pk, Lambda=Lambda, lambda_other_blocks=apply(Lambda,2,min),
K=100, tau=0.5, PFER_thr=50,
refine_calib_grid=FALSE, verbose=FALSE)
t1=Sys.time()
print(t1-t0)
block_names=c("Protein-protein", "Protein-transcript", "Transcript-transcript")
for (i in 1:3){
print(block_names[i])
CalibrationPlot(out, bi_dim = TRUE, block_id=i)
}
block_id
out
# Adjacency matrix of the calibrated network
A=CalibratedAdjacency(out)
# Using different colours for the proteins and transcripts
mynode_colours=c(rep("skyblue",ncol(proteins)),rep("forestgreen",ncol(transcripts)))
# Using gene symbols as labels (transcripts)
mynode_labels=c(colnames(proteins), annot[colnames(transcripts), "Symbol"])
names(mynode_labels)=colnames(x)
# Getting igraph object
mygraph=GetGraph(adjacency=A, node_color=mynode_colours, node_label=mynode_labels)
par(mar=rep(0,4))
set.seed(1)
plot(mygraph, layout=layout_with_fr(mygraph))
block_mat=GetBlockMatrix(pk=pk)
for (i in 1:3){
print(block_names[i])
print(sum(A[block_mat==i])/2)
}
#### COLOUR THE SMOKING RELATED TRANSCRIPTS ####
mynode_labels
#### COLOUR THE SMOKING RELATED TRANSCRIPTS ####
mynode_colours
mynode_colours=c(rep("skyblue",ncol(proteins)),rep("forestgreen",ncol(transcripts)))
mynode_labels=c(colnames(proteins), annot[colnames(transcripts), "Symbol"])
names(mynode_labels)=colnames(x)
mynode_colours[smoking_related_proteins]="tomato"
mynode_colours
mynode_colours=c(rep("skyblue",ncol(proteins)),rep("forestgreen",ncol(transcripts)))
mynode_labels=c(colnames(proteins), annot[colnames(transcripts), "Symbol"])
mynode_labels
mynode_labels[smoking_related_proteins]
which(mynode_labels %in% smoking_related_proteins)
mynode_colours[which(mynode_labels %in% smoking_related_proteins)]="tomato"
mynode_colours
mynode_colours=c(rep("skyblue",ncol(proteins)),rep("forestgreen",ncol(transcripts)))
mynode_labels=c(colnames(proteins), annot[colnames(transcripts), "Symbol"])
length(mynode_colours)
length(mynode_labels)
smoking_related_proteins
mynode_labels[which(mynode_labels %in% smoking_related_proteins)]
mynode_colours=c(rep("skyblue",ncol(proteins)),rep("forestgreen",ncol(transcripts)))
mynode_labels=c(colnames(proteins), annot[colnames(transcripts), "Symbol"])
names(mynode_labels)=colnames(x)
mynode_colours[which(mynode_labels %in% smoking_related_proteins)]="tomato"
mygraph=GetGraph(adjacency=A, node_color=mynode_colours, node_label=mynode_labels)
par(mar=rep(0,4))
set.seed(1)
plot(mygraph, layout=layout_with_fr(mygraph))
smoking_related_proteins
print(distances(mygraph)[smoking_related_proteins,smoking_related_proteins])
distances(mygraph)
print(distances(mygraph)[smoking_related_proteins,])
head(distances(mygraph))
head(mynode_labels)
(mynode_labels)
# Loading the data
proteins=readRDS("Data/Proteins_selected_denoised_re.rds")
transcripts=readRDS("Data/Transcripts_log_transformed.rds")
annot=readRDS("Data/Transcripts_annotation.rds")
# Combining measurements from the same individuals
ids=intersect(rownames(proteins), rownames(transcripts))
proteins=proteins[ids,]
transcripts=transcripts[ids,]
x=cbind(proteins, transcripts)
# Heatmap of correlation
pheatmap(cor(x), cluster_rows=FALSE, cluster_cols=FALSE, breaks=seq(-1,1,length.out=100), border=NA)
# Running stability selection under constraint
t0=Sys.time()
pk=c(ncol(proteins), ncol(transcripts))
Lambda=LambdaGridNetwork(data=x, pk=pk, lambda_path_refined_cardinal=20, PFER_thr=50)
out=CalibrateNetwork(data=x, pk=pk, Lambda=Lambda, lambda_other_blocks=apply(Lambda,2,min),
K=100, tau=0.5, PFER_thr=50,
refine_calib_grid=FALSE, verbose=FALSE)
t1=Sys.time()
print(t1-t0)
block_names=c("Protein-protein", "Protein-transcript", "Transcript-transcript")
for (i in 1:3){
print(block_names[i])
CalibrationPlot(out, bi_dim = TRUE, block_id=i)
}
# Adjacency matrix of the calibrated network
A=CalibratedAdjacency(out)
# Using different colours for the proteins and transcripts
mynode_colours=c(rep("skyblue",ncol(proteins)),rep("forestgreen",ncol(transcripts)))
# Using gene symbols as labels (transcripts)
mynode_labels=c(colnames(proteins), annot[colnames(transcripts), "Symbol"])
names(mynode_labels)=colnames(x)
# Getting igraph object
mygraph=GetGraph(adjacency=A, node_color=mynode_colours, node_label=mynode_labels)
par(mar=rep(0,4))
set.seed(1)
plot(mygraph, layout=layout_with_fr(mygraph))
block_mat=GetBlockMatrix(pk=pk)
for (i in 1:3){
print(block_names[i])
print(sum(A[block_mat==i])/2)
}
mynode_colours=c(rep("skyblue",ncol(proteins)),rep("forestgreen",ncol(transcripts)))
mynode_labels=c(colnames(proteins), annot[colnames(transcripts), "Symbol"])
names(mynode_labels)=colnames(x)
mynode_colours[which(mynode_labels %in% smoking_related_proteins)]="tomato"
mygraph=GetGraph(adjacency=A, node_color=mynode_colours, node_label=mynode_labels)
par(mar=rep(0,4))
set.seed(1)
plot(mygraph, layout=layout_with_fr(mygraph))
head(distances(mygraph))
print(distances(mygraph)[smoking_related_proteins,])
smoking_related_proteins
rownames(distances(mygraph))
annot[colnames(transcripts)
annot[colnames(transcripts)]
annot[colnames(transcripts)]
mynode_labels
mynode_colours=c(rep("skyblue",ncol(proteins)),rep("forestgreen",ncol(transcripts)))
mynode_labels=c(colnames(proteins), annot[colnames(transcripts), "Symbol"])
mynode_labels
head(x)
names(mynode_labels)=mynode_labels
mynode_labels
mynode_colours[which(mynode_labels %in% smoking_related_proteins)]="tomato"
mynode_colours
mygraph=GetGraph(adjacency=A, node_color=mynode_colours, node_label=mynode_labels)
par(mar=rep(0,4))
set.seed(1)
plot(mygraph, layout=layout_with_fr(mygraph))
head(distances(mygraph))
print(distances(mygraph)[smoking_related_proteins,smoking_related_proteins])
distances(mygraph)
mynode_labels
A
dim(A)
colnames(A) == rownames(A)
colnames(A) = rownames(A)
head(A)
colnames(transcripts)
mynode_colours=c(rep("skyblue",ncol(proteins)),rep("forestgreen",ncol(transcripts)))
mynode_labels=c(colnames(proteins), annot[colnames(transcripts), "Symbol"])
names(mynode_labels)=mynode_labels
mynode_colours[which(mynode_labels %in% smoking_related_proteins)]="tomato"
mygraph=GetGraph(adjacency=A, node_color=mynode_colours, node_label=mynode_labels)
par(mar=rep(0,4))
set.seed(1)
plot(mygraph, layout=layout_with_fr(mygraph))
head(distances(mygraph))
rownames(distances(mygraph))
which(rownames(distances(mygraph)), %in% smoking_related_proteins)
which(rownames(distances(mygraph)) %in% smoking_related_proteins)
which(mynode_labels %in% smoking_related_proteins)
print(distances(mygraph)[which(mynode_labels %in% smoking_related_proteins),which(mynode_labels %in% smoking_related_proteins)])
print(distances(mygraph)[c(which(mynode_labels %in% smoking_related_proteins)),which(mynode_labels %in% smoking_related_proteins)])
distances(mygraph)
which(mynode_labels %in% smoking_related_proteins)
smoking_proteins_index <- which(mynode_labels %in% smoking_related_proteins)
distances(mygraph)
distances(mygraph)[1,1]
distances(mygraph)[smoking_proteins_index,1]
dim(distances(mygraph))
smoking_proteins_index
distance_mat <- distances(mygraph)
rownames(distance_mat)
which(rownames(distance_mat) %in% smoking_related_proteins)
smoking_index[which(rownames(distance_mat) %in% smoking_related_proteins)]
distance_mat[which(rownames(distance_mat) %in% smoking_related_proteins)]
smoking_index <- which(rownames(distance_mat) %in% smoking_related_proteins)
mynode_colours=c(rep("skyblue",ncol(proteins)),rep("forestgreen",ncol(transcripts)))
mynode_labels=c(colnames(proteins), annot[colnames(transcripts), "Symbol"])
names(mynode_labels)=mynode_labels
mynode_colours[which(mynode_labels %in% smoking_related_proteins)]="tomato"
mygraph=GetGraph(adjacency=A, node_color=mynode_colours, node_label=mynode_labels)
par(mar=rep(0,4))
set.seed(1)
plot(mygraph, layout=layout_with_fr(mygraph))
head(distances(mygraph))
